version: '3'

volumes:
  redis_data:
    external: true
  postgres_data:
    external: true
  qdrant_data:
    external: true

services:
  flowise:
    image: flowiseai/flowise
    restart: unless-stopped
    container_name: flowise
    depends_on:
      - redis
      - postgres
    environment:
      - PORT=3001
      # Устаревший метод аутентификации, оставлен для миграции
      - FLOWISE_USERNAME=${FLOWISE_USERNAME}
      - FLOWISE_PASSWORD=${FLOWISE_PASSWORD}
      # Новая система аутентификации (v3.0.1+)
      - APP_URL=https://flowise.${DOMAIN_NAME}
      - JWT_AUTH_TOKEN_SECRET=${JWT_AUTH_TOKEN_SECRET}
      - JWT_REFRESH_TOKEN_SECRET=${JWT_REFRESH_TOKEN_SECRET}
      - JWT_TOKEN_EXPIRY_IN_MINUTES=60
      - JWT_REFRESH_TOKEN_EXPIRY_IN_MINUTES=129600
      - EXPRESS_SESSION_SECRET=${EXPRESS_SESSION_SECRET}
      - TOKEN_HASH_SECRET=${TOKEN_HASH_SECRET}
      - PASSWORD_SALT_HASH_ROUNDS=12
      # Redis конфигурация
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
      - REDIS_USER=default
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - FLOWISE_SECRETKEY_OVERWRITE=${TOKEN_HASH_SECRET}
      - FLOWISE_CACHE=redis
      - SESSION_STORE=redis
      # PostgreSQL конфигурация
      - DATABASE_TYPE=postgres
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
      - DATABASE_USER=${POSTGRES_USER}
      - DATABASE_PASSWORD=${POSTGRES_PASSWORD}
      - DATABASE_NAME=${POSTGRES_DB}
      - DATABASE_SSL=false
      - DATABASE_POOL_MIN=1
      - DATABASE_POOL_MAX=20
    volumes:
      - /opt/flowise:/root/.flowise
    networks:
      - app-network

  redis:
    image: redis:7-alpine
    container_name: redis
    restart: unless-stopped
    command: ["redis-server", "--requirepass", "${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    networks:
      - app-network

  postgres:
    image: ankane/pgvector:latest
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
      
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    restart: unless-stopped
    environment:
      - QDRANT_API_KEY=${QDRANT_API_KEY}
    volumes:
      - qdrant_data:/qdrant/storage
    # Только API порт нужен для доступа из контейнера Caddy
    ports:
      - 6333:6333
    networks:
      - app-network
      
  qdrant-ui:
    image: ghcr.io/qdrant/qdrant-web-ui:latest
    container_name: qdrant-ui
    restart: unless-stopped
    environment:
      - API_URL=https://qdrant.${DOMAIN_NAME}
    networks:
      - app-network

networks:
  app-network:
    external: true 